// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pubsub "cloud.google.com/go/pubsub"
	pubsub0 "github.com/ditointernet/go-dito/pubsub"
	gomock "github.com/golang/mock/gomock"
)

// MockTopicer is a mock of Topicer interface.
type MockTopicer struct {
	ctrl     *gomock.Controller
	recorder *MockTopicerMockRecorder
}

// MockTopicerMockRecorder is the mock recorder for MockTopicer.
type MockTopicerMockRecorder struct {
	mock *MockTopicer
}

// NewMockTopicer creates a new mock instance.
func NewMockTopicer(ctrl *gomock.Controller) *MockTopicer {
	mock := &MockTopicer{ctrl: ctrl}
	mock.recorder = &MockTopicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopicer) EXPECT() *MockTopicerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockTopicer) Publish(ctx context.Context, msg *pubsub.Message) pubsub0.Resultier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, msg)
	ret0, _ := ret[0].(pubsub0.Resultier)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockTopicerMockRecorder) Publish(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockTopicer)(nil).Publish), ctx, msg)
}

// MockResultier is a mock of Resultier interface.
type MockResultier struct {
	ctrl     *gomock.Controller
	recorder *MockResultierMockRecorder
}

// MockResultierMockRecorder is the mock recorder for MockResultier.
type MockResultierMockRecorder struct {
	mock *MockResultier
}

// NewMockResultier creates a new mock instance.
func NewMockResultier(ctrl *gomock.Controller) *MockResultier {
	mock := &MockResultier{ctrl: ctrl}
	mock.recorder = &MockResultierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultier) EXPECT() *MockResultierMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockResultier) Get(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockResultierMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockResultier)(nil).Get), ctx)
}
