// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pubsub "cloud.google.com/go/pubsub"
	pubsub0 "github.com/ditointernet/go-dito/pubsub"
	gomock "github.com/golang/mock/gomock"
)

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockPublisher) Publish(ctx context.Context, msg *pubsub.Message) pubsub0.Getter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, msg)
	ret0, _ := ret[0].(pubsub0.Getter)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPublisherMockRecorder) Publish(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisher)(nil).Publish), ctx, msg)
}

// MockGetter is a mock of Getter interface.
type MockGetter struct {
	ctrl     *gomock.Controller
	recorder *MockGetterMockRecorder
}

// MockGetterMockRecorder is the mock recorder for MockGetter.
type MockGetterMockRecorder struct {
	mock *MockGetter
}

// NewMockGetter creates a new mock instance.
func NewMockGetter(ctrl *gomock.Controller) *MockGetter {
	mock := &MockGetter{ctrl: ctrl}
	mock.recorder = &MockGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetter) EXPECT() *MockGetterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockGetter) Get(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGetterMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGetter)(nil).Get), ctx)
}

// MockToByteser is a mock of ToByteser interface.
type MockToByteser struct {
	ctrl     *gomock.Controller
	recorder *MockToByteserMockRecorder
}

// MockToByteserMockRecorder is the mock recorder for MockToByteser.
type MockToByteserMockRecorder struct {
	mock *MockToByteser
}

// NewMockToByteser creates a new mock instance.
func NewMockToByteser(ctrl *gomock.Controller) *MockToByteser {
	mock := &MockToByteser{ctrl: ctrl}
	mock.recorder = &MockToByteserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToByteser) EXPECT() *MockToByteserMockRecorder {
	return m.recorder
}

// ToBytes mocks base method.
func (m *MockToByteser) ToBytes() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToBytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToBytes indicates an expected call of ToBytes.
func (mr *MockToByteserMockRecorder) ToBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToBytes", reflect.TypeOf((*MockToByteser)(nil).ToBytes))
}

// MockSubscriberPipeline is a mock of SubscriberPipeline interface.
type MockSubscriberPipeline struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberPipelineMockRecorder
}

// MockSubscriberPipelineMockRecorder is the mock recorder for MockSubscriberPipeline.
type MockSubscriberPipelineMockRecorder struct {
	mock *MockSubscriberPipeline
}

// NewMockSubscriberPipeline creates a new mock instance.
func NewMockSubscriberPipeline(ctrl *gomock.Controller) *MockSubscriberPipeline {
	mock := &MockSubscriberPipeline{ctrl: ctrl}
	mock.recorder = &MockSubscriberPipelineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriberPipeline) EXPECT() *MockSubscriberPipelineMockRecorder {
	return m.recorder
}

// Map mocks base method.
func (m *MockSubscriberPipeline) Map(mapFn func(any) (any, error)) pubsub0.SubscriberPipeline {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Map", mapFn)
	ret0, _ := ret[0].(pubsub0.SubscriberPipeline)
	return ret0
}

// Map indicates an expected call of Map.
func (mr *MockSubscriberPipelineMockRecorder) Map(mapFn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Map", reflect.TypeOf((*MockSubscriberPipeline)(nil).Map), mapFn)
}

// Run mocks base method.
func (m *MockSubscriberPipeline) Run(ctx context.Context) chan any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(chan any)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockSubscriberPipelineMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSubscriberPipeline)(nil).Run), ctx)
}

// MockPipelineStep is a mock of PipelineStep interface.
type MockPipelineStep struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineStepMockRecorder
}

// MockPipelineStepMockRecorder is the mock recorder for MockPipelineStep.
type MockPipelineStepMockRecorder struct {
	mock *MockPipelineStep
}

// NewMockPipelineStep creates a new mock instance.
func NewMockPipelineStep(ctrl *gomock.Controller) *MockPipelineStep {
	mock := &MockPipelineStep{ctrl: ctrl}
	mock.recorder = &MockPipelineStepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineStep) EXPECT() *MockPipelineStepMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockPipelineStep) Do(arg0 context.Context, arg1 chan any, arg2 chan error) chan any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(chan any)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockPipelineStepMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockPipelineStep)(nil).Do), arg0, arg1, arg2)
}
