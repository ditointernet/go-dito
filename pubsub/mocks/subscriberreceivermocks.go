// Code generated by MockGen. DO NOT EDIT.
// Source: subscriber_steps/contracts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pubsub "cloud.google.com/go/pubsub"
	gomock "github.com/golang/mock/gomock"
)

// MockPubsubSubscription is a mock of PubsubSubscription interface.
type MockPubsubSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockPubsubSubscriptionMockRecorder
}

// MockPubsubSubscriptionMockRecorder is the mock recorder for MockPubsubSubscription.
type MockPubsubSubscriptionMockRecorder struct {
	mock *MockPubsubSubscription
}

// NewMockPubsubSubscription creates a new mock instance.
func NewMockPubsubSubscription(ctrl *gomock.Controller) *MockPubsubSubscription {
	mock := &MockPubsubSubscription{ctrl: ctrl}
	mock.recorder = &MockPubsubSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubsubSubscription) EXPECT() *MockPubsubSubscriptionMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockPubsubSubscription) Receive(ctx context.Context, f func(context.Context, *pubsub.Message)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockPubsubSubscriptionMockRecorder) Receive(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockPubsubSubscription)(nil).Receive), ctx, f)
}
